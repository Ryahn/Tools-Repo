name: Build Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows release
        run: |
          flutter build windows --release `
            --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 `
            --dart-define=WEB_BASE_URL=https://tools.zonies.xyz

      - name: Create ZIP archive
        run: |
          Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath "rule7_app-windows.zip" -Force

      - name: Setup Inno Setup
        run: |
          choco install innosetup -y --no-progress

      - name: Create Inno Setup script
        run: |
          $scriptContent = @"
          [Setup]
          AppName=Rule7
          AppVersion=$env:GITHUB_REF_NAME
          DefaultDirName={autopf}\Rule7
          DefaultGroupName=Rule7
          OutputBaseFilename=rule7_app-installer
          OutputDir=.
          Compression=lzma2
          SolidCompression=yes
          AppPublisher=Rule7
          AppPublisherURL=https://tools.zonies.xyz
          ArchitecturesAllowed=x64
          ArchitecturesInstallIn64BitMode=x64

          [Files]
          Source: "build\windows\x64\runner\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{group}\Rule7"; Filename: "{app}\rule7_app.exe"
          Name: "{autodesktop}\Rule7"; Filename: "{app}\rule7_app.exe"; Tasks: desktopicon

          [Tasks]
          Name: "desktopicon"; Description: "Create a desktop icon"; GroupDescription: "Additional icons:"
          "@
          $scriptContent | Out-File -FilePath "installer.iss" -Encoding UTF8

      - name: Build installer
        run: |
          # Try multiple possible paths for Inno Setup
          $possiblePaths = @(
            "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe",
            "${env:ProgramFiles}\Inno Setup 6\ISCC.exe",
            "$env:ChocolateyInstall\lib\innosetup\tools\ISCC.exe"
          )
          $innosetupPath = $null
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $innosetupPath = $path
              break
            }
          }
          if (!$innosetupPath) {
            # Try to find it in PATH
            $innosetupPath = (Get-Command ISCC.exe -ErrorAction SilentlyContinue).Source
          }
          if (!$innosetupPath) {
            Write-Error "Inno Setup compiler (ISCC.exe) not found"
            exit 1
          }
          Write-Host "Using Inno Setup at: $innosetupPath"
          & $innosetupPath installer.iss

      - name: Upload Windows artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rule7_app-windows.zip
            rule7_app-installer.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Fix CocoaPods permissions
        run: |
          find macos/Pods/Target\ Support\ Files -name "*.sh" -type f -exec chmod +x {} \; 2>/dev/null || true

      - name: Setup code signing
        if: ${{ secrets.MACOS_CERTIFICATE_BASE64 != '' }}
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'github-actions-keychain' }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Decode certificate
          echo "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" | base64 --decode > $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Enable codesigning from a non-interactive shell
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Use Developer ID Application for distribution outside App Store
          # Or use "Apple Development" for testing
          SIGNING_IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Developer ID Application" | head -n1 | cut -d '"' -f 2)
          if [ -z "$SIGNING_IDENTITY" ]; then
            SIGNING_IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Apple Development" | head -n1 | cut -d '"' -f 2)
          fi
          echo "SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV

      - name: Configure code signing
        if: ${{ secrets.MACOS_CERTIFICATE_BASE64 != '' }}
        run: |
          # Update Xcode project to use automatic signing with team ID
          sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' macos/Runner.xcodeproj/project.pbxproj
          # Ensure team ID is set (it should already be in the file)
          if ! grep -q "DEVELOPMENT_TEAM = A54L5PGPNX;" macos/Runner.xcodeproj/project.pbxproj; then
            echo "Warning: DEVELOPMENT_TEAM not found in project file"
          fi

      - name: Build macOS release
        env:
          SIGNING_IDENTITY: ${{ env.SIGNING_IDENTITY }}
        run: |
          # Build with code signing if certificate is available, otherwise build unsigned
          if [ -n "$SIGNING_IDENTITY" ]; then
            # Use automatic signing - Xcode will use the imported certificate
            flutter build macos --release \
              --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 \
              --dart-define=WEB_BASE_URL=https://tools.zonies.xyz
          else
            # Build without code signing as fallback
            sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' macos/Runner.xcodeproj/project.pbxproj
            sed -i '' 's/"CODE_SIGN_IDENTITY\[sdk=macosx\*\]" = "Apple Development";/"CODE_SIGN_IDENTITY[sdk=macosx*]" = "";/g' macos/Runner.xcodeproj/project.pbxproj
            sed -i '' '/DEVELOPMENT_TEAM = /d' macos/Runner.xcodeproj/project.pbxproj
            flutter build macos --release \
              --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 \
              --dart-define=WEB_BASE_URL=https://tools.zonies.xyz
          fi

      - name: Create ZIP archive
        run: |
          cd build/macos/Build/Products/Release
          zip -r ../../../../../rule7_app-macos.zip rule7_app.app

      - name: Create DMG
        run: |
          brew install create-dmg || true
          create-dmg \
            --volname "Rule7 Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "rule7_app.app" 200 190 \
            --hide-extension "rule7_app.app" \
            --app-drop-link 600 185 \
            rule7_app-macos.dmg \
            build/macos/Build/Products/Release/

      - name: Upload macOS artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rule7_app-macos.zip
            rule7_app-macos.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libblkid1 \
            liblzma5 \
            desktop-file-utils \
            libappstream-dev \
            libsecret-1-dev

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Build Linux release
        run: |
          flutter build linux --release \
            --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 \
            --dart-define=WEB_BASE_URL=https://tools.zonies.xyz

      - name: Create TAR.GZ archive
        run: |
          cd build/linux/x64/release
          tar -czf ../../../../rule7_app-linux.tar.gz bundle/

      - name: Setup AppImageKit
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool

      - name: Prepare AppImage
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy bundle files to usr/bin
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          
          # Find the actual executable name
          EXECUTABLE=$(find AppDir/usr/bin -type f -executable ! -name "*.so" ! -name "*.so.*" | head -n 1 | xargs basename)
          
          # Create desktop file
          cat > AppDir/usr/share/applications/rule7_app.desktop <<EOF
          [Desktop Entry]
          Name=Rule7
          Comment=Rule7 Application
          Exec=$EXECUTABLE
          Icon=rule7_app
          Type=Application
          Categories=Utility;
          EOF
          
          # Try to copy icon if it exists
          if [ -f "linux/runner/resources/app_icon.png" ]; then
            cp linux/runner/resources/app_icon.png AppDir/usr/share/icons/hicolor/256x256/apps/rule7_app.png
          fi
          
          # Create AppRun symlink for AppImage compatibility
          ln -sf usr/bin/$EXECUTABLE AppDir/AppRun

      - name: Create AppImage
        run: |
          ARCH=x86_64 appimagetool AppDir rule7_app-linux.AppImage

      - name: Upload Linux artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rule7_app-linux.tar.gz
            rule7_app-linux.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Android APK
        run: |
          flutter build apk --release \
            --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 \
            --dart-define=WEB_BASE_URL=https://tools.zonies.xyz

      - name: Rename APK
        run: |
          cp build/app/outputs/flutter-apk/app-release.apk rule7_app-android.apk

      - name: Upload Android artifact
        uses: softprops/action-gh-release@v2
        with:
          files: rule7_app-android.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

