name: Build Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows release
        run: |
          flutter build windows --release `
            --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 `
            --dart-define=WEB_BASE_URL=https://tools.zonies.xyz

      - name: Create ZIP archive
        run: |
          Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath "rule7_app-windows.zip" -Force

      - name: Setup Inno Setup
        run: |
          choco install innosetup -y --no-progress

      - name: Create Inno Setup script
        run: |
          $scriptContent = @"
          [Setup]
          AppName=Rule7
          AppVersion=$env:GITHUB_REF_NAME
          DefaultDirName={autopf}\Rule7
          DefaultGroupName=Rule7
          OutputBaseFilename=rule7_app-installer
          OutputDir=.
          Compression=lzma2
          SolidCompression=yes
          AppPublisher=Rule7
          AppPublisherURL=https://tools.zonies.xyz
          ArchitecturesAllowed=x64
          ArchitecturesInstallIn64BitMode=x64

          [Files]
          Source: "build\windows\x64\runner\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{group}\Rule7"; Filename: "{app}\rule7_app.exe"
          Name: "{autodesktop}\Rule7"; Filename: "{app}\rule7_app.exe"; Tasks: desktopicon

          [Tasks]
          Name: "desktopicon"; Description: "Create a desktop icon"; GroupDescription: "Additional icons:"
          "@
          $scriptContent | Out-File -FilePath "installer.iss" -Encoding UTF8

      - name: Build installer
        run: |
          # Try multiple possible paths for Inno Setup
          $possiblePaths = @(
            "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe",
            "${env:ProgramFiles}\Inno Setup 6\ISCC.exe",
            "$env:ChocolateyInstall\lib\innosetup\tools\ISCC.exe"
          )
          $innosetupPath = $null
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $innosetupPath = $path
              break
            }
          }
          if (!$innosetupPath) {
            # Try to find it in PATH
            $innosetupPath = (Get-Command ISCC.exe -ErrorAction SilentlyContinue).Source
          }
          if (!$innosetupPath) {
            Write-Error "Inno Setup compiler (ISCC.exe) not found"
            exit 1
          }
          Write-Host "Using Inno Setup at: $innosetupPath"
          & $innosetupPath installer.iss

      - name: Upload Windows artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rule7_app-windows.zip
            rule7_app-installer.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      - name: Flutter deps
        run: flutter pub get

      # Optional: show code signing identities (debugging only)
      - name: List available code signing identities
        run: security find-identity -v -p codesigning || true

      - name: Import Developer ID cert (only if provided)
        if: ${{ secrets.MACOS_CERTIFICATE_BASE64 != '' }}
        env:
          CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERT=$RUNNER_TEMP/cert.p12
          KEYCHAIN=$RUNNER_TEMP/build.keychain-db
          echo "$CERTIFICATE_BASE64" | base64 --decode > "$CERT"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security import "$CERT" -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN"
          security list-keychain -d user -s "$KEYCHAIN"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

      - name: Build macOS
        shell: bash
        env:
          APP_BUNDLE_ID: com.ryahn.rule7app
          TEAM_ID: 3WGL87VS8W
        run: |
          if [ -z "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" ]; then
            echo "No cert secrets found -> building unsigned"
            flutter build macos --release --no-codesign \
              --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 \
              --dart-define=WEB_BASE_URL=https://tools.zonies.xyz
          else
            echo "Cert secrets present -> building signed"
            flutter build macos --release \
              --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 \
              --dart-define=WEB_BASE_URL=https://tools.zonies.xyz
          fi

      - name: Verify signature (only if signed)
        if: ${{ secrets.MACOS_CERTIFICATE_BASE64 != '' }}
        run: |
          codesign -dv --verbose=4 "build/macos/Build/Products/Release/rule7_app.app" || true

      - name: Notarize app
        if: ${{ secrets.AC_API_KEY_ID != '' }}
        env:
          MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          AC_API_KEY_ID: ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_KEY_P8: ${{ secrets.AC_API_KEY_P8 }}
        run: |
          # Only notarize if app was signed
          if [ -z "$MACOS_CERTIFICATE_BASE64" ]; then
            echo "⚠️  Skipping notarization: App was not signed (no certificate provided)"
            exit 0
          fi
          
          echo "📦 Starting notarization process..."
          KEY=$RUNNER_TEMP/ac_api_key.p8
          echo "$AC_API_KEY_P8" | base64 --decode > "$KEY"
          
          echo "📤 Submitting app to Apple notary service..."
          xcrun notarytool submit "build/macos/Build/Products/Release/rule7_app.app" \
            --key "$KEY" \
            --key-id "$AC_API_KEY_ID" \
            --issuer "$AC_API_ISSUER_ID" \
            --wait
          
          echo "✅ Notarization successful, stapling ticket to app..."
          xcrun stapler staple "build/macos/Build/Products/Release/rule7_app.app"
          echo "✅ Notarization complete! App is now notarized and ready for distribution."

      - name: ZIP app
        run: |
          cd build/macos/Build/Products/Release
          zip -r ../../../../../rule7_app-macos.zip rule7_app.app

      - name: Create DMG
        run: |
          brew install create-dmg || true
          create-dmg \
            --volname "Rule7" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "rule7_app.app" 200 190 \
            --app-drop-link 600 185 \
            rule7_app-macos.dmg \
            build/macos/Build/Products/Release/rule7_app.app

      - name: Upload macOS artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rule7_app-macos.zip
            rule7_app-macos.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      - name: Install build deps
        run: |
          sudo apt-get update
          # Flutter desktop uses GTK. These are common runtime bits; having them in CI avoids false failures.
          sudo apt-get install -y libgtk-3-0 libayatana-appindicator3-1 patchelf imagemagick

      - name: Get deps
        run: flutter pub get

      - name: Build Linux (Release)
        run: |
          flutter build linux --release \
            --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 \
            --dart-define=WEB_BASE_URL=https://tools.zonies.xyz

      # ---------- AppImage packaging ----------
      - name: Prepare AppDir
        run: |
          APP=rule7_app
          BUNDLE=build/linux/x64/release/bundle
          APPDIR=$PWD/AppDir
          mkdir -p $APPDIR/usr/bin
          mkdir -p $APPDIR/usr/share/applications
          mkdir -p $APPDIR/usr/share/icons/hicolor/256x256/apps

          # Copy Flutter bundle
          cp -R "$BUNDLE"/* "$APPDIR/usr/bin/"

          # Minimal AppRun to point to your binary
          cat > $APPDIR/AppRun << 'EOF'
          #!/usr/bin/env bash
          HERE="$(dirname "$(readlink -f "$0")")"
          exec "$HERE/usr/bin/rule7_app" "$@"
          EOF
          chmod +x $APPDIR/AppRun

          # Desktop file
          cat > $APPDIR/$APP.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=Rule7
          Exec=rule7_app
          Icon=rule7
          Categories=Utility;
          Terminal=false
          EOF
          cp $APPDIR/$APP.desktop $APPDIR/usr/share/applications/

          # Icon: reuse the Flutter icon if you don't have a real one yet
          # Place a 256x256 PNG as rule7.png if you have branding; otherwise make a placeholder
          if [ -f "linux/runner/resources/app_icon.png" ]; then
            cp linux/runner/resources/app_icon.png $APPDIR/usr/share/icons/hicolor/256x256/apps/rule7.png
            cp linux/runner/resources/app_icon.png $APPDIR/rule7.png
          else
            convert -size 256x256 xc:#111111 $APPDIR/usr/share/icons/hicolor/256x256/apps/rule7.png || true
            convert -size 256x256 xc:#111111 $APPDIR/rule7.png || true
          fi

          # Ensure main binary is executable
          chmod +x $APPDIR/usr/bin/rule7_app

      - name: Build AppImage (no FUSE)
        run: |
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          # Extract to avoid FUSE requirement on GH runners
          ./appimagetool --appimage-extract >/dev/null
          ./squashfs-root/AppRun AppDir
          mv Rule7-*.AppImage rule7_app-x86_64.AppImage || mv rule7_app-*.AppImage rule7_app-x86_64.AppImage || true

      # ---------- tar.xz fallback (useful for servers/CI users) ----------
      - name: Create tarball
        run: |
          cd build/linux/x64/release
          tar -cJf ../../../../rule7_app-linux-x86_64.tar.xz bundle

      - name: Upload Linux artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rule7_app-x86_64.AppImage
            rule7_app-linux-x86_64.tar.xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Android APK
        run: |
          flutter build apk --release \
            --dart-define=API_BASE_URL=https://tools.zonies.xyz/api/mobile/v1 \
            --dart-define=WEB_BASE_URL=https://tools.zonies.xyz

      - name: Rename APK
        run: |
          cp build/app/outputs/flutter-apk/app-release.apk rule7_app-android.apk

      - name: Upload Android artifact
        uses: softprops/action-gh-release@v2
        with:
          files: rule7_app-android.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

